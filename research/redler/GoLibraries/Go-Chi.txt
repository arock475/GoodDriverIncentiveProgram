Go-Chi is a lightweight router for http services.

It specializes in providing powerful tooling to build rest api services. It is very compatiable with the 
already fast and extensive standard http library that go provides. It is 100% comptatiable with net/http.

A key component of chi is its flexiablity to integrate other libraries, especially middleware libraries.
Unlike Gin, chi is not an all encopassing framework, and instead focuses on doing http routing the best it can,
and you can integrate other tooling to fill in other tasks.

Chi does provide their own middleware package that you can use if you would like.

Here is an example using chi to create some basic routes and to make a route that is 
specifically to be used as a REST api endpoint.

func main() {
r := chi.NewRouter()

	r.Use(middleware.RequestID)
	r.Use(middleware.Logger)
	r.Use(middleware.Recoverer)
	r.Use(middleware.URLFormat)
	r.Use(render.SetContentType(render.ContentTypeJSON))

	r.Get("/", func(w http.ResponseWriter, r *http.Request) {
		w.Write([]byte("root."))
	})

	r.Get("/ping", func(w http.ResponseWriter, r *http.Request) {
		w.Write([]byte("pong"))
	})

	r.Get("/panic", func(w http.ResponseWriter, r *http.Request) {
		panic("test")
	})

	// RESTy routes for "articles" resource
	r.Route("/articles", func(r chi.Router) {
		r.With(paginate).Get("/", ListArticles)
		r.Post("/", CreateArticle)       // POST /articles
		r.Get("/search", SearchArticles) // GET /articles/search

		r.Route("/{articleID}", func(r chi.Router) {
			r.Use(ArticleCtx)            // Load the *Article on the request context
			r.Get("/", GetArticle)       // GET /articles/123
			r.Put("/", UpdateArticle)    // PUT /articles/123
			r.Delete("/", DeleteArticle) // DELETE /articles/123
		})

		// GET /articles/whats-up
		r.With(ArticleCtx).Get("/{articleSlug:[a-z-]+}", GetArticle)
	})
}

Because of chi's lightweight and flexiable nature, it is very easy to integrate tests.
