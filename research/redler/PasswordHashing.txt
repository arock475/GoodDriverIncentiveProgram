As a rule, we as developers should never have access to a user's password.
This includes when calling the api to store it, retrieving it from db, or in the client typescript.

To do this, we must hash the password for storage and validation, we will use the bcrypt library for this.

Its quite simple:
we will use https://www.npmjs.com/package/bcrypt

first we create the bcrypt object:
const bcrypt = require('bcrypt');

We specifiy how many rounds of salting we do to offset the original hash to prevent bruteforce reverse hash lookup attacks:
const saltRounds = 10;

In our user logon component we will eventually receive input for the password field, and lets say we store it in the variable/prop plainPass:
const plainPass = pfield.plaintext;


Now we hash the password:
bcrypt.hash(plainPass, saltRounds, function(err, hash) {
    // This is where we would call our GO api to deposit the hashed password into the db.
    // For example:
    api.CreateUser(User {username, hash});
});

Now when we want a user to login, we must validate the password by hashing it and checking against the 
hashed password in the database for the user:

bcrypt.compare(plainPass, hash, function(err, result) {
    // if the result is true, then the passwords match.
    if (result == true) {
        // login success
    }
});